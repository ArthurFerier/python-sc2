# If you change the name, change the link on  the README.md for the badge too
name: Tests

on: [push, pull_request]

jobs:
  run_pytest_tests:
    # Run pytest tests on pickle files (pre-generated SC2 API observations)
    name: Run pytest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # Python 3.6 fails due to: https://www.python.org/dev/peps/pep-0563/
        # If all type annotations were removed, this library should run in py3.6 and perhaps even 3.5
        # Python 3.7 support has been dropped due to missing cached_property https://docs.python.org/3/library/functools.html#functools.cached_property
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache poetry
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install

      # Run pylint
    - name: Run pylint
      run: |
        poetry run pylint sc2
        poetry run pylint examples

      # Run tests
    - name: Run poetry pytest tests on pickle files
      run: |
        poetry run pytest test

      # Run benchmarks
    - name: Run benchmark benchmark_array_creation
      run: |
        poetry run pytest test/benchmark_array_creation.py

    - name: Run benchmark benchmark_distance_two_points
      run: |
        poetry run pytest test/benchmark_distance_two_points.py

    - name: Run benchmark benchmark_distances_cdist
      run: |
        poetry run pytest test/benchmark_distances_cdist.py

    - name: Run benchmark benchmark_distances_points_to_point
      run: |
        poetry run pytest test/benchmark_distances_points_to_point.py

    - name: Run benchmark benchmark_distances_units
      run: |
        poetry run pytest test/benchmark_distances_units.py

  run_test_bots:
    # Run test bots that download the SC2 linux client and run it
    name: Run testbots linux
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      # Do not allow this test to cancel. Finish all jobs regardless of error
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
    # Copy data from repository
    - uses: actions/checkout@v1

    - name: Print directories and files
      run: |
        sudo apt-get install tree
        tree

    - name: Load and build docker image
      # Build docker image from Dockerfile using python 3.8
      run: |
        docker build -t test_image -f test/Dockerfile_3.8 .

    - name: Run autotest_bot.py
      # Run bot and list resulting files (replay file, stable_id.json)
      run: |
        docker run -it -d --name my_container test_image
        docker exec -i my_container bash -c "python test/travis_test_script.py test/autotest_bot.py"
        docker exec -i my_container bash -c "tree"
        docker rm -f my_container

    - name: Run upgradestest_bot.py
      run: |
        docker run -it -d --name my_container test_image
        docker exec -i my_container bash -c "python test/travis_test_script.py test/upgradestest_bot.py"
        docker exec -i my_container bash -c "tree"
        docker rm -f my_container

    - name: Run damagetest_bot.py
      run: |
        docker run -it -d --name my_container test_image
        docker exec -i my_container bash -c "python test/travis_test_script.py test/damagetest_bot.py"
        docker exec -i my_container bash -c "tree"
        docker rm -f my_container

    - name: Run queries_test_bot.py
      run: |
        docker run -it -d --name my_container test_image
        docker exec -i my_container bash -c "python test/travis_test_script.py test/queries_test_bot.py"
        docker exec -i my_container bash -c "tree"
        docker rm -f my_container

    - name: Run example bots vs computer
      run: |
        docker run -it -d --name my_container test_image
        docker exec -i my_container bash -c "python test/run_example_bots_vs_computer.py"
        docker exec -i my_container bash -c "tree"
        docker rm -f my_container

# TODO Fix in main.py "run_multiple_games" or "a_run_multiple_games" or "a_run_multiple_games_nokill"
#  run_bot_vs_bot:
#    # Run test bots that download the SC2 linux client and run it
#    name: Run example bots against each other
#    runs-on: ${{ matrix.os }}
#    timeout-minutes: 30
#    strategy:
#      # Do not allow this test to cancel. Finish all jobs regardless of error
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#    steps:
#    # Copy data from repository
#    - uses: actions/checkout@v1
#
#    - name: Print directories and files
#      run: |
#        sudo apt-get install tree
#        tree
#
#    - name: Load and build docker image
#      # Build docker image from Dockerfile using python 3.8
#      run: |
#        docker build -t test_image -f test/Dockerfile_3.8 .
#
#    - name: Run example bots vs each other
#      run: |
#        docker run -it -d --name my_container test_image
#        docker exec -i my_container bash -c "python test/run_example_bots_vs_each_other.py"
#        docker exec -i my_container bash -c "tree"
#        docker rm -f my_container

  release_to_github_pages:
    name: GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        python-version: [3.9]
    needs: [run_pytest_tests, run_test_bots]

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Remove docs and prepare to build
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contexts
      run: |
        python -m pip install poetry
        poetry install

    - name: Build docs from scratch
      run: |
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./docs/index.html\" />" > index.html
        mkdir -p docs
        cd docs_generate
        poetry run sphinx-build -a -E -b html . ../docs

    - name: Publish to Github Pages
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        BASE_BRANCH: develop   # The branch the action should deploy from.
        BRANCH: gh-pages   # The branch the action should deploy to.
        FOLDER: .   # The folder the action should deploy.

  release_to_pypi:
    name: Pypi
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        python-version: [3.9]
    needs: [run_pytest_tests, run_test_bots]

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Update dependencies
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contexts
      run: |
        pip install poetry

    - name: Build package
        # Builds package to dist/* directory
      run: |
        poetry build

      # Publish package on pypi
    - name: Publish
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      continue-on-error: true
      run: |
        poetry publish --username ${{ secrets.pypi_username }} --password ${{ secrets.pypi_password }}

